# Makefile for Wirepas C Mesh API test suite

# Toolchain
CC  := gcc
CXX := g++
AS  := as
LD  := ld
AR  := ar

# Paths, including trailing path separator
SOURCEPREFIX   := ./
BUILDPREFIX    := build/

# This test suite needs the mesh lib
MESH_LIB_FOLDER := ../lib/
MESH_LIB := $(MESH_LIB_FOLDER)build/mesh_api_lib.a

# General compiler flags
CFLAGS  := -std=c++17 -Wall -Werror

# Targets definition
MAIN_APP := meshAPItest

TARGET_APP := $(BUILDPREFIX)$(MAIN_APP)

# Add Api header
CFLAGS  += -I$(MESH_LIB_FOLDER)api
# Add pthtread lib as needed by Mesh Lib
LDFLAGS += -pthread -lgtest
# Add Reentrant flag as using pthread
CFLAGS  += -D_REENTRANT

# Test app needs some platform abstraction (It is a hack as not really part of lib API)
CFLAGS  += -I$(MESH_LIB_FOLDER)platform

# Main app
SOURCES := $(SOURCEPREFIX)test_main.cpp

# Test cases
CFLAGS  += -I$(SOURCEPREFIX)
SOURCES += $(SOURCEPREFIX)wpc_test.cpp \
	$(SOURCEPREFIX)general_tests.cpp     \
	$(SOURCEPREFIX)scratchpad_tests.cpp  \
	$(SOURCEPREFIX)cdd_tests.cpp

OBJECTS := $(patsubst $(SOURCEPREFIX)%,                     \
                  $(BUILDPREFIX)%,                          \
                  $(SOURCES:.cpp=.o))

# Functions

# Also create the target directory if it does not exist
define COMPILE
	echo "  CXX $(2)"
	mkdir -p $(dir $(1))
	$(CXX) $(CFLAGS) -c -o $(1) $(2)
endef

define LINK
	echo "  Linking $(1)"
	$(CXX) $(CFLAGS) -o $(1) $(2) $(MESH_LIB) $(LDFLAGS)
endef

define CLEAN
	echo "  Cleaning up"
	$(RM) -r $(BUILDPREFIX)
endef

# Target rules

# Use dependency files automatically generated by GCC.
# First collect all C source files
AUTODEPS := $(patsubst $(SOURCEPREFIX)%.c, $(BUILDPREFIX)%.d, $(SOURCES))

ifeq ($(V),1)
# "V=1" on command line, print commands.
else
# Default, do not print commands.
.SILENT:
endif

.PHONY: all
all: app

app: $(TARGET_APP)

.PHONY: clean
clean:
	$(call CLEAN)
	make -C $(MESH_LIB_FOLDER) clean

$(MESH_LIB):
	make -C $(MESH_LIB_FOLDER)

$(BUILDPREFIX)%.o: $(SOURCEPREFIX)%.cpp
	$(call COMPILE,$@,$<)

$(BUILDPREFIX)$(MAIN_APP): $(OBJECTS) $(MESH_LIB)
	$(call LINK,$@,$^)
